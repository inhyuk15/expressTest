"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertUrlsMethodsSchemaToSwagger = exports.generateSwaggerPath = void 0;
var utils_1 = require("./utils");
var toSwaggerSchema = function (schema) {
    switch (schema.type) {
        case 'enum':
            return {
                type: 'string',
                enum: schema.options,
            };
        case 'object':
            return __assign(__assign({}, schema), { properties: utils_1.mapEntries(function (_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return [k, toSwaggerSchema(v)];
                }, schema.properties) });
        case 'array':
            return __assign(__assign({}, schema), { items: toSwaggerSchema(schema.items) });
        default:
            return schema;
    }
};
var generateSwaggerPath = function (schemas) {
    var _a, _b, _c, _d;
    return {
        parameters: __spreadArray(__spreadArray(__spreadArray([], __read(Object.entries((_b = (_a = schemas.pathSchema) === null || _a === void 0 ? void 0 : _a.properties) !== null && _b !== void 0 ? _b : {}).map(function (_a) {
            var _b = __read(_a, 2), k = _b[0], v = _b[1];
            return ({
                in: 'path',
                name: k,
                required: v.required,
                schema: toSwaggerSchema(v),
            });
        }))), __read(Object.entries((_d = (_c = schemas.querySchema) === null || _c === void 0 ? void 0 : _c.properties) !== null && _d !== void 0 ? _d : {}).map(function (_a) {
            var _b = __read(_a, 2), k = _b[0], v = _b[1];
            return ({
                in: 'query',
                name: k,
                required: v.required,
                schema: toSwaggerSchema(v),
            });
        }))), [
            utils_1.isObject(schemas.bodySchema)
                ? {
                    in: 'body',
                    name: 'body',
                    required: schemas.bodySchema.required,
                    schema: toSwaggerSchema(schemas.bodySchema),
                }
                : null,
        ]).filter(Boolean),
        responses: __assign({}, (utils_1.isObject(schemas.returnsSchema)
            ? {
                '200': {
                    schema: toSwaggerSchema(schemas.returnsSchema),
                },
            }
            : {})),
    };
};
exports.generateSwaggerPath = generateSwaggerPath;
var convertUrlsMethodsSchemaToSwagger = function (obj) {
    return utils_1.mapEntries(function (_a) {
        var _b = __read(_a, 2), url = _b[0], methods = _b[1];
        return [
            url,
            utils_1.mapEntries(function (_a) {
                var _b = __read(_a, 2), method = _b[0], schema = _b[1];
                return [
                    method,
                    exports.generateSwaggerPath({
                        pathSchema: schema.pathSchema,
                        querySchema: schema.querySchema,
                        bodySchema: schema.bodySchema,
                        returnsSchema: schema.returnsSchema,
                    }),
                ];
            }, methods),
        ];
    }, obj);
};
exports.convertUrlsMethodsSchemaToSwagger = convertUrlsMethodsSchemaToSwagger;
