import { Schema } from './schemaBuilder';
declare type MakeOptional<T, Required extends boolean> = Required extends true ? T : T | undefined;
export declare type InferSchemaType<T extends Schema> = T extends {
    type: 'object';
    properties: infer U;
} ? {
    [K in keyof U]: InferSchemaType<U[K]>;
} : T extends {
    type: 'array';
    items: any;
} ? MakeOptional<InferSchemaType<T['items']>[], T['required']> : T extends {
    type: 'boolean';
} ? MakeOptional<boolean, T['required']> : T extends {
    type: 'string';
} ? MakeOptional<string, T['required']> : T extends {
    type: 'enum';
} ? MakeOptional<T['options'][number], T['required']> : T extends {
    type: 'number';
} ? MakeOptional<number, T['required']> : T extends {
    type: 'tCustomScalar';
} ? MakeOptional<ReturnType<T['parser']>, T['required']> : T extends {
    type: 'any';
} ? any : never;
export {};
