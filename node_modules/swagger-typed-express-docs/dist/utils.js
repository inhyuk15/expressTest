"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports.syncAllSettled = exports.mergePaths = exports.trimSlash = exports.removeLastSlash = exports.removeFirstSlash = exports.isObject = exports.mapEntries = void 0;
var mapEntries = function (fn, obj) { return Object.fromEntries(Object.entries(obj).map(fn)); };
exports.mapEntries = mapEntries;
var isObject = function (a) { return typeof a === 'object' && a !== null && !Array.isArray(a); };
exports.isObject = isObject;
var removeFirstSlash = function (path) { return (path.startsWith('/') ? path.substr(1) : path); };
exports.removeFirstSlash = removeFirstSlash;
var removeLastSlash = function (path) { return (path.endsWith('/') ? path.slice(0, -1) : path); };
exports.removeLastSlash = removeLastSlash;
var trimSlash = function (path) { return exports.removeFirstSlash(exports.removeLastSlash(path)); };
exports.trimSlash = trimSlash;
var mergePaths = function (path1, path2) {
    return "/" + [exports.trimSlash(path1), exports.trimSlash(path2)].filter(Boolean).join('/');
};
exports.mergePaths = mergePaths;
var syncAllSettled = function (syncFns) {
    return syncFns.map(function (syncFn) {
        try {
            syncFn();
            return { status: 'fulfilled' };
        }
        catch (err) {
            return { status: 'rejected', reason: err };
        }
    });
};
exports.syncAllSettled = syncAllSettled;
var merge = function (a, b) {
    return exports.isObject(a) && exports.isObject(b) ? exports.deepMerge(a, b) : exports.isObject(a) && !exports.isObject(b) ? a : b;
};
var coalesceByKey = function (source) { return function (acc, key) {
    return (acc[key] && source[key]
        ? (acc[key] = merge(acc[key], source[key]))
        : (acc[key] = source[key])) && acc;
}; };
var deepMerge = function (target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    return sources.reduce(function (acc, source) { return Object.keys(source).reduce(coalesceByKey(source), acc); }, target);
};
exports.deepMerge = deepMerge;
