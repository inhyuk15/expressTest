"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSchemaToYupValidationObject = void 0;
var yup = __importStar(require("yup"));
var utils_1 = require("./utils");
var convertSchemaToYupValidationObject = function (schema) {
    var _a;
    switch (schema === null || schema === void 0 ? void 0 : schema.type) {
        case 'array': {
            var yupArr = yup.array().of(exports.convertSchemaToYupValidationObject(schema.items));
            return schema.required ? yupArr.required() : yupArr.notRequired();
        }
        case 'object': {
            var yupObj_1 = yup.object(utils_1.mapEntries(function (_a) {
                var _b = __read(_a, 2), k = _b[0], v = _b[1];
                return [k, exports.convertSchemaToYupValidationObject(v)];
            }, schema.properties));
            return schema.required ? yupObj_1.required() : yupObj_1.notRequired();
        }
        case 'boolean':
            var validator = yup.mixed().oneOf([true, false]);
            return schema.required ? validator.required() : validator.notRequired();
        case 'number':
            return schema.required ? yup.number().required() : yup.number().notRequired();
        case 'string':
            return schema.required ? yup.string().required() : yup.string().notRequired();
        case 'customScalar':
            var yupObCustomScalar = yup.mixed().transform(schema.parser).test({
                name: schema.name,
                test: schema.validator,
            });
            return schema.required ? yupObCustomScalar.required() : yupObCustomScalar.notRequired();
        case 'any':
            return yup.mixed();
        case 'enum':
            var yupObj = yup.mixed().oneOf(schema.options);
            return schema.required ? yupObj.required() : yupObj.notRequired();
        default:
            throw new Error("unsupported type " + ((_a = schema) === null || _a === void 0 ? void 0 : _a.type));
    }
};
exports.convertSchemaToYupValidationObject = convertSchemaToYupValidationObject;
