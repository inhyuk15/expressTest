import { DeepPartial } from './utils';
import { InferSchemaType } from './InferSchemaType';
import { NextFunction, Request, Response } from 'express';
import { Schema } from './schemaBuilder';
export declare const __expressSwaggerHack_key__ = "__expressSwaggerHack_key__";
export declare const __expressSwaggerHack__: unique symbol;
declare type Config = {
    params?: Record<string, Schema>;
    query?: Record<string, Schema>;
    body?: Record<string, Schema>;
    returns?: Schema;
};
declare type UseEmptyObjectAsDefault<T> = T extends Record<any, any> ? T : {};
declare type WrapToObject<T> = {
    type: 'object';
    required: true;
    properties: T;
};
export declare const apiDoc: <C extends Config>(docs: C) => (handle: (req: Request<{ [K in keyof UseEmptyObjectAsDefault<C["params"]>]: InferSchemaType<UseEmptyObjectAsDefault<C["params"]>[K]>; }, any, { [K_1 in keyof UseEmptyObjectAsDefault<C["body"]>]: InferSchemaType<UseEmptyObjectAsDefault<C["body"]>[K_1]>; }, { [K_2 in keyof UseEmptyObjectAsDefault<C["query"]>]: InferSchemaType<UseEmptyObjectAsDefault<C["query"]>[K_2]>; }, Record<string, any>>, res: Response, next: NextFunction) => void) => (message: symbol) => {
    apiRouteSchema: {
        paramsSchema: {
            type: "object";
            properties: Record<string, Schema>;
            required: true;
        } | null;
        querySchema: {
            type: "object";
            properties: Record<string, Schema>;
            required: true;
        } | null;
        bodySchema: {
            type: "object";
            properties: Record<string, Schema>;
            required: true;
        } | null;
        returnsSchema: Schema | undefined;
    };
    handle: (req: Request, res: Response, next: NextFunction) => void;
};
declare type ExpressRouterInternalStruct = {
    name: 'router';
    regexp: RegExp;
    keys: {
        name: string;
        optional: boolean;
        offset: number;
    }[];
    __handle: ExpressRouteInternalStruct;
    handle: ExpressRouteInternalStruct;
    route: {
        stack: {
            handle: (...any: any[]) => any;
            method: string;
        }[];
        path: string;
    };
};
declare type ExpressRouteHandlerInternalStruct = {
    name: 'bound dispatch';
    route: {
        stack: {
            handle: any;
            method: string;
        }[];
        path: string;
    };
};
declare type ExpressRouteInternalStruct = {
    stack: (ExpressRouteHandlerInternalStruct | ExpressRouterInternalStruct)[];
};
declare type SwaggerShape = DeepPartial<{
    swagger: string;
    info: {
        description: string;
        version: string;
        title: string;
        termsOfService: string;
        contact: {
            email: string;
        };
    };
    host: string;
    basePath: string;
    schemes: string[];
    paths: any;
}>;
export declare const initApiDocs: (expressApp: {
    _router: ExpressRouteInternalStruct;
}, customSwaggerType?: SwaggerShape) => any;
export {};
