export declare const mapEntries: <Key extends string | number, V, RetKey extends string | number, RV>(fn: (a: [Key, V]) => [RetKey, RV], obj: Record<Key, V>) => Record<RetKey, RV>;
export declare const isObject: (a: any) => boolean;
export declare const removeFirstSlash: (path: string) => string;
export declare const removeLastSlash: (path: string) => string;
export declare const trimSlash: (path: string) => string;
export declare const mergePaths: (path1: string, path2: string) => string;
export declare const syncAllSettled: (syncFns: (() => any)[]) => ({
    status: "fulfilled";
    reason?: undefined;
} | {
    status: "rejected";
    reason: any;
})[];
export declare type DeepPartial<T> = T extends (infer Item)[] ? DeepPartial<Item>[] | undefined : T extends Record<string, any> ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
export declare const deepMerge: (target: any, ...sources: any[]) => any;
